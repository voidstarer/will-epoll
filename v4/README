To compile:
	make clean
	make

To run unittests:
	make test

To manually test the server with sample clients, use the simpleclient binary located in test directory.


The code is organized as following:
main.c
	This is the main entry point for the server. It does the following:
	1) Reads the command-line arguments from the user. The options are:
	-p <port> - To specify the listening port for the server. Default: 2222
	-l <0|1|2> - To specify the log level. 0 - Error, 1 - Info, 2 - Debug
		Here 2 is the most verbose and 0 is the least verbose.

	2) Capture signal SIGINT (CTRL+C) for a normal exit.

	3) Calls the main polling loop do_poll.

	The following interfaces are called according to the event:
		onConnect : When a client connects to the server.
		onDataReceived : When the server receives a "packet" from the client.
		onDisconnect : When a client closes the connection with the server.
		onError : This interface can be called under various conditions:
				i) If client violates the protocol.
				ii) If the write to client fails
				iii) Client disconnects due to an unknown error.
		houseKeeping : This routine would be called every 40 seconds. It is defined
			by "EPOLL_LOOP_TIMEOUT" macro in client.c. This routine can be used
			for doing houseKeeping work like cleaning of stale clients, tuning
			the memory buffers, gathering the stats etc.
		
client.c, client.h
	A client is identified by a 16 bit ID. Over here, we have defined an array of pointers
	to clients, which get created as the clients connect to the server.

	Protocol: The protocol between client and server is a "packet". The first packet
		sent by a client after connection is called a HELLO packet. After sending
		the HELLO packet they can then send DATA packet to other clients by
		specifying their ID. The structure of packet looks as following:

		/* struct _packet should be packed */
		struct __attribute__((__packed__)) _packet {
			uint32_t type;    /* packet type - to identify the type of data being sent within */
			uint16_t src_id;  /* sender’s id in network order */
			uint16_t dst_id;  /* receiver’s id in network order */
			uint32_t length;  /* length of the packet (header + data ) in network order */
			uint8_t data[0];  /* contiguous array of bytes */
		};

	Since we are passing binary structure between client and server, we have to be careful with
	endianess. Our RPi can be little-endian or it may also be big-endian. Therefore, NEVER set
	the variables of packet like type, src_id, dst_id, length etc. directly. Instead use the
	macros specified in client.h to get or set the variable. The macros are as following:
		/* packet length should always be in network order */
		/* total packet length HDR + DATA */
		#define GET_PACKET_LENGTH(_p)      (ntohl(((struct _packet*)_p)->length))
		#define GET_PACKET_DATA_LENGTH(_p) (GET_PACKET_LENGTH(_p) - PACKET_HDR_LENGTH)
		#define GET_PACKET_TYPE(_p)        (ntohl(((struct _packet *)_p)->type))
		#define GET_PACKET_SRC_ID(_p)      (ntohs(((struct _packet *)_p)->src_id))
		#define GET_PACKET_DST_ID(_p)      (ntohs(((struct _packet *)_p)->dst_id))

		/* one should always use this routine to set the packet length, the argument is 
		 * packet and data length
		 */
		#define SET_PACKET_DATA_LENGTH(_p, _l)  { ((struct _packet *)_p)->length = htonl((_l) + PACKET_HDR_LENGTH); }
		#define SET_PACKET_TYPE(_p, _l)         { ((struct _packet *)_p)->type = htonl(_l); }
		#define SET_PACKET_SRC_ID(_p, _l)       { ((struct _packet *)_p)->src_id = htons(_l); }
		#define SET_PACKET_DST_ID(_p, _l)       { ((struct _packet *)_p)->dst_id = htons(_l); }
	
event.c, event.h
	All the epoll magic goes into these files.

log.c, log.h
	Logging routines.

test
	Unit tests are contained here.

coverage
	Code coverage HTML report is stored here.
